---
import { Icon } from "astro-icon/components";
import LightDarkToggle from "./LightDarkToggle.astro";

const currentPath = Astro.url.pathname;

const navItems = [
	{ href: "/", text: "Home", active: currentPath === "/" },
	{ href: "/blog", text: "Blog", active: currentPath.startsWith("/blog") },
	{ href: "/about", text: "About", active: currentPath.startsWith("/about") },
];
---

<header>
	<div
		id="main-header"
		class="fixed w-full z-50 transition duration-500 px-4 sm:px-10"
	>
		<div
			class="bg-white w-full md:w-2xl mx-auto flex h-12 items-center justify-between
			ring-1 ring-slate-300 mt-10 px-4 rounded-lg shadow dark:bg-slate-800 dark:ring-white/10 dark:text-slate-200"
		>
			<a href="/" class="font-headings font-black text-3xl">SoBasic</a>

			<div class="flex items-center h-full">
				<nav class="hidden md:block h-full">
					<ul class="flex space-x-6 h-full">
						{
							navItems.map((item) => (
								<li>
									<a
										href={item.href}
										class={`relative flex items-center h-full hover:text-primary-500 transition ${item.active ? "text-primary-500" : ""}`}
									>
										{item.text}
										{item.active && (
											<span class="absolute inset-x-0 -bottom-px h-px bg-primary-500" />
										)}
									</a>
								</li>
							))
						}
					</ul>
				</nav>
				<div class="ml-8">
					<button
						data-open-mobile-nav
						class="md:hidden flex-inline items-center justify-center w-10 h-10"
						aria-label="Open main navigation"
					>
						<Icon
							name="heroicons:bars-2-solid"
							class="inline-block w-5 h-5"
						/>
					</button>
					<LightDarkToggle />
				</div>
			</div>
		</div>
	</div>

	<!-- Mobile Navigation -->
	<div
		data-mobile-nav-element
		data-close-mobile-nav
		class="hidden bg-black/50 fixed inset-0 z-60 backdrop-blur-xs transition opacity-0 starting:opacity-0"
	>
	</div>

	<div
		data-mobile-nav-element
		class="hidden fixed z-60 inset-x-4 top-8 p-6 bg-white dark:bg-slate-800 dark:ring-white/10 dark:text-slate-200 shadow-md rounded-2xl transition starting:opacity-0 starting:scale-85 starting:-translate-y-8"
	>
		<div class="flex justify-end">
			<button data-close-mobile-nav aria-label="Close main navigation">
				<Icon name="heroicons:x-mark" />
			</button>
		</div>
		<nav>
			<ul class="divide-y divide-slate-200 dark:divide-slate-600">
				{
					navItems.map((item) => (
						<li>
							<a
								class={`block py-3 ${item.active ? "text-primary-500" : ""}`}
								href={item.href}
							>
								{item.text}
							</a>
						</li>
					))
				}
			</ul>
		</nav>
	</div>
</header>

<script>
	function initNavigation() {
		/*
		 * Hide and show navigation on scroll
		 */
		const body = document.body;
		const scrollUp = "scroll-up";
		const scrollDown = "scroll-down";
		let lastScroll = 0;
		const scrollThreshold = 50;

		window.addEventListener("scroll", () => {
			const currentScroll = window.scrollY;
			if (currentScroll <= 0) {
				body.classList.remove(scrollUp);
				return;
			}

			// Only apply changes if the difference in scroll position exceeds the threshold
			if (Math.abs(currentScroll - lastScroll) > scrollThreshold) {
				if (
					currentScroll > lastScroll &&
					!body.classList.contains(scrollDown)
				) {
					// down
					body.classList.remove(scrollUp);
					body.classList.add(scrollDown);
				} else if (
					currentScroll < lastScroll &&
					body.classList.contains(scrollDown)
				) {
					// up
					body.classList.remove(scrollDown);
					body.classList.add(scrollUp);
				}
				lastScroll = currentScroll;
			}
		});

		/*
		 * Mobile navigation
		 */
		const mobileNavElements = document.querySelectorAll(
			"[data-mobile-nav-element]",
		);

		// close mobile navigation
		document.querySelectorAll("[data-close-mobile-nav]").forEach((btn) => {
			btn.addEventListener("click", (e) => {
				mobileNavElements.forEach((element) => {
					element.classList.add("hidden");
				});
			});
		});

		// open mobile navigation
		document.querySelectorAll("[data-open-mobile-nav]").forEach((btn) => {
			btn.addEventListener("click", (e) => {
				mobileNavElements.forEach((element) => {
					element.classList.remove("hidden");
					element.classList.add(
						"opacity-100",
						"block",
						"scale-100",
						"translate-y-0",
					);
				});
			});
		});

		// close mobile navigation on window resize
		const styles = getComputedStyle(document.documentElement);
		const breakpointMd = styles.getPropertyValue("--breakpoint-md");
		const breakpointMdInRem = parseFloat(breakpointMd.replace("rem", ""));
		const rootFontSizeInPx = parseFloat(styles.fontSize);
		const breakpointMdInPx = breakpointMdInRem * rootFontSizeInPx;

		window.addEventListener("resize", () => {
			if (window.innerWidth > breakpointMdInPx) {
				mobileNavElements.forEach((element) => {
					element.classList.add("hidden");
				});
			}
		});
	}
	initNavigation();
	document.addEventListener("astro:page-load", () => {
		initNavigation();
	});
</script>
